{"ast":null,"code":"export function Bezier(mX1, mY1, mX2, mY2) {\n  'worklet';\n\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n  function A(aA1, aA2) {\n    'worklet';\n\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n\n  function B(aA1, aA2) {\n    'worklet';\n\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n\n  function C(aA1) {\n    'worklet';\n\n    return 3.0 * aA1;\n  }\n\n  function calcBezier(aT, aA1, aA2) {\n    'worklet';\n\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  function getSlope(aT, aA1, aA2) {\n    'worklet';\n\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    'worklet';\n\n    var currentX;\n    var currentT;\n    var i = 0;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    'worklet';\n\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  }\n\n  function LinearEasing(x) {\n    'worklet';\n\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  var sampleValues = new Array(kSplineTableSize);\n\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX) {\n    'worklet';\n\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample;\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x;\n    }\n\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}","map":{"version":3,"names":["Bezier","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing"],"sources":["/home/carlos/Documents/develop/DH/0322UNPRO3CM02ARMO/clase-15-agregar_y_obtener_datos/node_modules/react-native-reanimated/lib/reanimated2/Bezier.js"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nexport function Bezier(mX1, mY1, mX2, mY2) {\n    'worklet';\n    const NEWTON_ITERATIONS = 4;\n    const NEWTON_MIN_SLOPE = 0.001;\n    const SUBDIVISION_PRECISION = 0.0000001;\n    const SUBDIVISION_MAX_ITERATIONS = 10;\n    const kSplineTableSize = 11;\n    const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n    function A(aA1, aA2) {\n        'worklet';\n        return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n    }\n    function B(aA1, aA2) {\n        'worklet';\n        return 3.0 * aA2 - 6.0 * aA1;\n    }\n    function C(aA1) {\n        'worklet';\n        return 3.0 * aA1;\n    }\n    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n    function calcBezier(aT, aA1, aA2) {\n        'worklet';\n        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n    }\n    // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n    function getSlope(aT, aA1, aA2) {\n        'worklet';\n        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n    }\n    function binarySubdivide(aX, aA, aB, mX1, mX2) {\n        'worklet';\n        let currentX;\n        let currentT;\n        let i = 0;\n        do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n                aB = currentT;\n            }\n            else {\n                aA = currentT;\n            }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION &&\n            ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n    }\n    function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n        'worklet';\n        for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n            const currentSlope = getSlope(aGuessT, mX1, mX2);\n            if (currentSlope === 0.0) {\n                return aGuessT;\n            }\n            const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n    }\n    function LinearEasing(x) {\n        'worklet';\n        return x;\n    }\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n    }\n    if (mX1 === mY1 && mX2 === mY2) {\n        return LinearEasing;\n    }\n    // FIXME: Float32Array is not available in Hermes right now\n    //\n    // var float32ArraySupported = typeof Float32Array === 'function';\n    // const sampleValues = float32ArraySupported\n    // ? new Float32Array(kSplineTableSize)\n    // : new Array(kSplineTableSize);\n    // Precompute samples table\n    const sampleValues = new Array(kSplineTableSize);\n    for (let i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    function getTForX(aX) {\n        'worklet';\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        // Interpolate to provide an initial guess for t\n        const dist = (aX - sampleValues[currentSample]) /\n            (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        else if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n    return function BezierEasing(x) {\n        'worklet';\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n        }\n        // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}