{"ast":null,"code":"import { PermissionStatus } from 'expo-modules-core';\nexport var CameraType;\n\n(function (CameraType) {\n  CameraType[\"front\"] = \"front\";\n  CameraType[\"back\"] = \"back\";\n})(CameraType || (CameraType = {}));\n\nexport var FlashMode;\n\n(function (FlashMode) {\n  FlashMode[\"on\"] = \"on\";\n  FlashMode[\"off\"] = \"off\";\n  FlashMode[\"auto\"] = \"auto\";\n  FlashMode[\"torch\"] = \"torch\";\n})(FlashMode || (FlashMode = {}));\n\nexport var AutoFocus;\n\n(function (AutoFocus) {\n  AutoFocus[\"on\"] = \"on\";\n  AutoFocus[\"off\"] = \"off\";\n  AutoFocus[\"auto\"] = \"auto\";\n  AutoFocus[\"singleShot\"] = \"singleShot\";\n})(AutoFocus || (AutoFocus = {}));\n\nexport var WhiteBalance;\n\n(function (WhiteBalance) {\n  WhiteBalance[\"auto\"] = \"auto\";\n  WhiteBalance[\"sunny\"] = \"sunny\";\n  WhiteBalance[\"cloudy\"] = \"cloudy\";\n  WhiteBalance[\"shadow\"] = \"shadow\";\n  WhiteBalance[\"incandescent\"] = \"incandescent\";\n  WhiteBalance[\"fluorescent\"] = \"fluorescent\";\n  WhiteBalance[\"continuous\"] = \"continuous\";\n  WhiteBalance[\"manual\"] = \"manual\";\n})(WhiteBalance || (WhiteBalance = {}));\n\nexport var ImageType;\n\n(function (ImageType) {\n  ImageType[\"png\"] = \"png\";\n  ImageType[\"jpg\"] = \"jpg\";\n})(ImageType || (ImageType = {}));\n\nexport var VideoCodec;\n\n(function (VideoCodec) {\n  VideoCodec[\"H264\"] = \"avc1\";\n  VideoCodec[\"HEVC\"] = \"hvc1\";\n  VideoCodec[\"JPEG\"] = \"jpeg\";\n  VideoCodec[\"AppleProRes422\"] = \"apcn\";\n  VideoCodec[\"AppleProRes4444\"] = \"ap4h\";\n})(VideoCodec || (VideoCodec = {}));\n\nexport { PermissionStatus };","map":{"version":3,"sources":["../src/Camera.types.ts"],"names":[],"mappings":"AAAA,SAA6B,gBAA7B,QAA2E,mBAA3E;AAGA,OAAA,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;EAIpB,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EAIA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACD,CATD,EAAY,UAAU,KAAV,UAAU,GAAA,EAAA,CAAtB;;AAWA,OAAA,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;EAInB,SAAA,CAAA,IAAA,CAAA,GAAA,IAAA;EAIA,SAAA,CAAA,KAAA,CAAA,GAAA,KAAA;EAIA,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA;EAIA,SAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACD,CAjBD,EAAY,SAAS,KAAT,SAAS,GAAA,EAAA,CAArB;;AAmBA,OAAA,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;EAInB,SAAA,CAAA,IAAA,CAAA,GAAA,IAAA;EAIA,SAAA,CAAA,KAAA,CAAA,GAAA,KAAA;EAIA,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA;EAIA,SAAA,CAAA,YAAA,CAAA,GAAA,YAAA;AACD,CAjBD,EAAY,SAAS,KAAT,SAAS,GAAA,EAAA,CAArB;;AAmBA,OAAA,IAAY,YAAZ;;AAAA,CAAA,UAAY,YAAZ,EAAwB;EAItB,YAAA,CAAA,MAAA,CAAA,GAAA,MAAA;EAIA,YAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EAIA,YAAA,CAAA,QAAA,CAAA,GAAA,QAAA;EAIA,YAAA,CAAA,QAAA,CAAA,GAAA,QAAA;EAIA,YAAA,CAAA,cAAA,CAAA,GAAA,cAAA;EAIA,YAAA,CAAA,aAAA,CAAA,GAAA,aAAA;EAIA,YAAA,CAAA,YAAA,CAAA,GAAA,YAAA;EAIA,YAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACD,CAjCD,EAAY,YAAY,KAAZ,YAAY,GAAA,EAAA,CAAxB;;AAmCA,OAAA,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;EACnB,SAAA,CAAA,KAAA,CAAA,GAAA,KAAA;EACA,SAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACD,CAHD,EAAY,SAAS,KAAT,SAAS,GAAA,EAAA,CAArB;;AAQA,OAAA,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;EAIpB,UAAA,CAAA,MAAA,CAAA,GAAA,MAAA;EAIA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAA;EAIA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAA;EAIA,UAAA,CAAA,gBAAA,CAAA,GAAA,MAAA;EAIA,UAAA,CAAA,iBAAA,CAAA,GAAA,MAAA;AACD,CArBD,EAAY,UAAU,KAAV,UAAU,GAAA,EAAA,CAAtB;;AAgNA,SAA6B,gBAA7B","sourcesContent":["import { PermissionResponse, PermissionStatus, PermissionExpiration } from 'expo-modules-core';\nimport { ViewProps } from 'react-native';\n\nexport enum CameraType {\n  /**\n   * @platforms ios, android, web\n   */\n  front = 'front',\n  /**\n   * @platforms ios, android, web\n   */\n  back = 'back',\n}\n\nexport enum FlashMode {\n  /**\n   * @platforms ios, android, web\n   */\n  on = 'on',\n  /**\n   * @platforms ios, android, web\n   */\n  off = 'off',\n  /**\n   * @platforms ios, android, web\n   */\n  auto = 'auto',\n  /**\n   * @platforms ios, android, web\n   */\n  torch = 'torch',\n}\n\nexport enum AutoFocus {\n  /**\n   * @platforms ios, android, web\n   */\n  on = 'on',\n  /**\n   * @platforms ios, android, web\n   */\n  off = 'off',\n  /**\n   * @platforms web\n   */\n  auto = 'auto',\n  /**\n   * @platforms web\n   */\n  singleShot = 'singleShot',\n}\n\nexport enum WhiteBalance {\n  /**\n   * @platforms ios, android, web\n   */\n  auto = 'auto',\n  /**\n   * @platforms ios, android\n   */\n  sunny = 'sunny',\n  /**\n   * @platforms ios, android\n   */\n  cloudy = 'cloudy',\n  /**\n   * @platforms ios, android\n   */\n  shadow = 'shadow',\n  /**\n   * @platforms ios, android\n   */\n  incandescent = 'incandescent',\n  /**\n   * @platforms ios, android\n   */\n  fluorescent = 'fluorescent',\n  /**\n   * @platforms web\n   */\n  continuous = 'continuous',\n  /**\n   * @platforms web\n   */\n  manual = 'manual',\n}\n\nexport enum ImageType {\n  png = 'png',\n  jpg = 'jpg',\n}\n\n/**\n * This option specifies what codec to use when recording a video.\n */\nexport enum VideoCodec {\n  /**\n   * @platforms ios\n   */\n  H264 = 'avc1',\n  /**\n   * @platforms ios\n   */\n  HEVC = 'hvc1',\n  /**\n   * @platforms ios\n   */\n  JPEG = 'jpeg',\n  /**\n   * @platforms ios\n   */\n  AppleProRes422 = 'apcn',\n  /**\n   * @platforms ios\n   */\n  AppleProRes4444 = 'ap4h',\n}\n\nexport type ImageParameters = {\n  imageType: ImageType;\n  quality: number | null;\n};\n\nexport type ImageSize = {\n  width: number;\n  height: number;\n};\n\nexport type WebCameraSettings = Partial<{\n  autoFocus: string;\n  flashMode: string;\n  whiteBalance: string;\n  exposureCompensation: number;\n  colorTemperature: number;\n  iso: number;\n  brightness: number;\n  contrast: number;\n  saturation: number;\n  sharpness: number;\n  focusDistance: number;\n  zoom: number;\n}>;\n\nexport type CapturedPicture = {\n  width: number;\n  height: number;\n  uri: string;\n  base64?: string;\n  // note(bacon): The types are currently only defined for web.\n  exif?: Partial<MediaTrackSettings>;\n};\n\nexport type CameraPictureOptions = {\n  quality?: number;\n  base64?: boolean;\n  exif?: boolean;\n  onPictureSaved?: (picture: CameraCapturedPicture) => void;\n  // TODO(Bacon): Is it possible to implement this in the browser?\n  skipProcessing?: boolean;\n  // Web-only\n  scale?: number;\n  imageType?: ImageType;\n  isImageMirror?: boolean;\n  // internal\n  id?: number;\n  fastMode?: boolean;\n};\n\nexport type CameraRecordingOptions = {\n  maxDuration?: number;\n  maxFileSize?: number;\n  quality?: number | string;\n  mute?: boolean;\n  mirror?: boolean;\n  // Android\n  videoBitrate?: number;\n  // iOS\n  codec?: VideoCodec;\n};\n\nexport type CameraCapturedPicture = {\n  width: number;\n  height: number;\n  uri: string;\n  base64?: string;\n  exif?: any;\n};\n\nexport type PictureSavedListener = (event: {\n  nativeEvent: { data: CapturedPicture; id: number };\n}) => void;\n\nexport type CameraReadyListener = () => void;\n\nexport type MountErrorListener = (event: { nativeEvent: CameraMountError }) => void;\n\nexport type CameraMountError = { message: string };\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\nexport type BarCodePoint = Point;\n\nexport type BarCodeScanningResult = {\n  type: string;\n  data: string;\n  /** @platform web */\n  cornerPoints?: BarCodePoint[];\n};\n\nexport type Face = {\n  faceID: number;\n  bounds: {\n    origin: Point;\n    size: {\n      height: number;\n      width: number;\n    };\n  };\n  rollAngle: number;\n  yawAngle: number;\n  smilingProbability: number;\n  leftEarPosition: Point;\n  rightEarPosition: Point;\n  leftEyePosition: Point;\n  leftEyeOpenProbability: number;\n  rightEyePosition: Point;\n  rightEyeOpenProbability: number;\n  leftCheekPosition: Point;\n  rightCheekPosition: Point;\n  mouthPosition: Point;\n  leftMouthPosition: Point;\n  rightMouthPosition: Point;\n  noseBasePosition: Point;\n};\n\nexport type FaceDetectionResult = { faces: Face[] };\n\nexport type ConstantsType = {\n  Type: typeof CameraType;\n  FlashMode: typeof FlashMode;\n  AutoFocus: typeof AutoFocus;\n  WhiteBalance: typeof WhiteBalance;\n  VideoQuality: any;\n  VideoStabilization: any;\n  VideoCodec: typeof VideoCodec;\n};\n\nexport type CameraProps = ViewProps & {\n  type?: number | keyof typeof CameraType;\n  flashMode?: number | keyof typeof FlashMode;\n  whiteBalance?: number | keyof typeof WhiteBalance;\n  autoFocus?: boolean | number | keyof typeof AutoFocus;\n  zoom?: number;\n  ratio?: string;\n  focusDepth?: number;\n  onCameraReady?: Function;\n  useCamera2Api?: boolean;\n  pictureSize?: string;\n  videoStabilizationMode?: number;\n  onMountError?: (event: CameraMountError) => void;\n  barCodeScannerSettings?: object;\n  onBarCodeScanned?: (scanningResult: BarCodeScanningResult) => void;\n  faceDetectorSettings?: object;\n  onFacesDetected?: (faces: FaceDetectionResult) => void;\n  poster?: string;\n};\n\nexport type CameraNativeProps = {\n  pointerEvents?: any;\n  style?: any;\n  ref?: Function;\n  onCameraReady?: CameraReadyListener;\n  onMountError?: MountErrorListener;\n  onBarCodeScanned?: (event: { nativeEvent: BarCodeScanningResult }) => void;\n  onFacesDetected?: (event: { nativeEvent: FaceDetectionResult }) => void;\n  onFaceDetectionError?: (event: { nativeEvent: Error }) => void;\n  onPictureSaved?: PictureSavedListener;\n  type?: number | string;\n  flashMode?: number | string;\n  autoFocus?: string | boolean | number;\n  focusDepth?: number;\n  zoom?: number;\n  whiteBalance?: number | string;\n  pictureSize?: string;\n  barCodeScannerSettings?: BarCodeSettings;\n  faceDetectorSettings?: object;\n  barCodeScannerEnabled?: boolean;\n  faceDetectorEnabled?: boolean;\n  // Android\n  ratio?: string;\n  useCamera2Api?: boolean;\n  // Web\n  poster?: string;\n};\n\nexport type BarCodeSettings = {\n  barCodeTypes: string[];\n  interval?: number;\n};\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}