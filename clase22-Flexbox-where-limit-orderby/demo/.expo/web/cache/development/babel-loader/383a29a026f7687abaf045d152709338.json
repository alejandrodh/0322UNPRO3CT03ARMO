{"ast":null,"code":"import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors\";\nimport { makeMutable } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { Extrapolate } from \"../reanimated1/derived\";\nimport { useSharedValue } from \"./hook/useSharedValue\";\n\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors) {\n  'worklet';\n\n  var h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  var s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  var v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v);\n};\n\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors) {\n  'worklet';\n\n  var r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\n  var g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\n  var b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\n  var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return rgbaColor(r, g, b, a);\n};\n\nvar getInterpolateRGB = function getInterpolateRGB(colors) {\n  'worklet';\n\n  var r = [];\n  var g = [];\n  var b = [];\n  var a = [];\n\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = processColor(color);\n\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n};\n\nvar getInterpolateHSV = function getInterpolateHSV(colors) {\n  'worklet';\n\n  var h = [];\n  var s = [];\n  var v = [];\n\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = RGBtoHSV(processColor(color));\n\n    if (processedColor) {\n      h.push(processedColor.h);\n      s.push(processedColor.s);\n      v.push(processedColor.v);\n    }\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\nexport var interpolateColor = function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\n  }\n\n  throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};\nexport var ColorSpace;\n\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\n\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null)\n  });\n}\nexport var interpolateSharableColor = function interpolateSharableColor(value, interpolateConfig) {\n  'worklet';\n\n  var colors = interpolateConfig.value.cache.value;\n\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n\n    return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n\n    return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\n  }\n\n  throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};","map":{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","Extrapolate","useSharedValue","interpolateColorsHSV","value","inputRange","colors","h","CLAMP","s","v","interpolateColorsRGB","r","g","b","a","getInterpolateRGB","i","length","color","processedColor","undefined","push","getInterpolateHSV","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["/home/carlos/Documents/develop/DH/0322UNPRO3CM02ARMO/clase-15-agregar_y_obtener_datos/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"],"sourcesContent":["import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\n// @ts-ignore JS file\nimport { Extrapolate } from '../reanimated1/derived';\nimport { useSharedValue } from './hook/useSharedValue';\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n    'worklet';\n    const h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v);\n};\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n    'worklet';\n    const r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\n    const g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\n    const b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return rgbaColor(r, g, b, a);\n};\nconst getInterpolateRGB = (colors) => {\n    'worklet';\n    const r = [];\n    const g = [];\n    const b = [];\n    const a = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const processedColor = processColor(color);\n        // explicit check in case if processedColor is 0\n        if (processedColor !== null && processedColor !== undefined) {\n            r.push(red(processedColor));\n            g.push(green(processedColor));\n            b.push(blue(processedColor));\n            a.push(opacity(processedColor));\n        }\n    }\n    return { r, g, b, a };\n};\nconst getInterpolateHSV = (colors) => {\n    'worklet';\n    const h = [];\n    const s = [];\n    const v = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const processedColor = RGBtoHSV(processColor(color));\n        if (processedColor) {\n            h.push(processedColor.h);\n            s.push(processedColor.s);\n            v.push(processedColor.v);\n        }\n    }\n    return { h, s, v };\n};\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\n    'worklet';\n    if (colorSpace === 'HSV') {\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\n    }\n    else if (colorSpace === 'RGB') {\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\n    }\n    throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB) {\n    return useSharedValue({\n        inputRange,\n        outputRange,\n        colorSpace,\n        cache: makeMutable(null),\n    });\n}\nexport const interpolateSharableColor = (value, interpolateConfig) => {\n    'worklet';\n    let colors = interpolateConfig.value.cache.value;\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n        if (!colors) {\n            colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\n    }\n    else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n        if (!colors) {\n            colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\n    }\n    throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}